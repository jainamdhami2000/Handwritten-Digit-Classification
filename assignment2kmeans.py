# -*- coding: utf-8 -*-
"""Assignment2Kmeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bVqZAtDxxLY40BvUlbAzuZupNBrI94D0

# Importing Libraries
"""

import numpy as np
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
import os, sys
from IPython.display import display
from IPython.display import Image as _Imgdis
from PIL import Image
import numpy as np
from skimage import color
from skimage import io

"""Unzipping dataset in drive(if done on colab)"""

! unzip 'drive/My Drive/1272_2280_bundle_archive.zip'

"""## Importing Training Set

Taking all file names of images in the training set folder (trainingSet) and converting to a numpy array
"""

from skimage import color
from skimage import io
x_train=np.empty((42000,28,28),dtype='uint8')
y_train = np.empty((42000,1),dtype='uint8')
c = 0
for x in range(10):
   training_folder = "trainingSet/trainingSet/"+str(x)
   X_train_file=[f for f in os.listdir(training_folder) if os.path.isfile(os.path.join(training_folder, f))] 
   for z in X_train_file:
     x_train[c] = np.array(io.imread('trainingSet/trainingSet/'+str(x)+'/'+z))
     y_train[c] = x
     c+=1

"""## Importing Training Set

Taking all file names of images in the test set folder (trainingSample) and converting to a numpy array
"""

x_test=np.empty((600,28,28),dtype='uint8')
y_test = np.empty((600,1),dtype='uint8')
c = 0
for x in range(10):
   testing_folder = "trainingSample/trainingSample/"+str(x)
   X_test_file=[f for f in os.listdir(testing_folder) if os.path.isfile(os.path.join(testing_folder, f))] 
   for z in X_test_file:
     x_test[c] = np.array(io.imread('trainingSample/trainingSample/'+str(x)+'/'+z))
     y_test[c] = x
     c+=1

"""Checking type of training and test set"""

print(type(x_train))
print(type(x_test))
print(type(y_train))
print(type(y_test))
len(x_train)

"""Checking shape of training and test set"""

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

"""Displaying first 9 images of training set"""

plt.gray() # B/W Images
plt.figure(figsize = (10,9)) # Adjusting figure size
# Displaying a grid of 3x3 images
for i in range(9):
 plt.subplot(3,3,i+1)
 plt.imshow(x_train[i])

"""Printing examples in 'y_train'"""

# Printing examples in 'y_train'
for i in range(5):
  print(y_train[i][0])

"""Checking the minimum and maximum values of x_train"""

# Checking the minimum and maximum values of x_train
print(x_train.min())
print(x_train.max())

"""Data Normalization"""

# Data Normalization
# Conversion to float
x_train = x_train.astype('float32') 
x_test = x_test.astype('float32')# Normalization
x_train = x_train/255.0
x_test = x_test/255.0

"""Checking the minimum and maximum values of x_train"""

# Checking the minimum and maximum values of x_train
print(x_train.min())
print(x_train.max())

"""Reshaping input data since the input data have to be converted from 3 dimensional format to 2 dimensional format to be fed into the K-Means Clustering algorithm"""

# Reshaping input data
X_train = x_train.reshape(len(x_train),-1)
X_test = x_test.reshape(len(x_test),-1)

# Checking the shape
print(X_train.shape)
print(X_test.shape)

"""### Building the model"""

from sklearn.cluster import MiniBatchKMeans
total_clusters = len(np.unique(y_test))
kmeans = MiniBatchKMeans(n_clusters = total_clusters)
kmeans.fit(X_train)

kmeans.labels_

"""Concatinating y_train and y_test since retrieve_info takes 1D array"""

y_train = np.concatenate(y_train)
y_test = np.concatenate(y_test)

"""Associates most probable label with each cluster in KMeans model
  returns: dictionary of clusters assigned to each label
"""

def retrieve_info(cluster_labels,y_train):
  # Initializing
  reference_labels = {} 
  # For loop to run through each label of cluster label
  for i in range(len(np.unique(kmeans.labels_))):
    index = np.where(cluster_labels == i,1,0)
    num = np.bincount(y_train[index==1]).argmax()
    reference_labels[i] = num
  return reference_labels

retrieve_info(kmeans.labels_,y_train)

"""We run the ‘retrieve_info’ function and process it to get ‘number_labels’ which denotes the number displayed in image."""

reference_labels = retrieve_info(kmeans.labels_,y_train)
number_labels = np.random.rand(len(kmeans.labels_))
for i in range(len(kmeans.labels_)):
  number_labels[i] = reference_labels[kmeans.labels_[i]]

"""Comparing Predicted values and Actual values"""

# Comparing Predicted values and Actual values
print(number_labels[:20].astype('int'))
print(y_train[:20])

# Calculating accuracy score
from sklearn.metrics import accuracy_score
print(accuracy_score(number_labels,y_train))

"""Function to calculate metrics for the model"""

# Function to calculate metrics for the model
def calculate_metrics(model,output):
  print('Number of clusters is {}'.format(model.n_clusters))
  print('Inertia : {}'.format(model.inertia_))
  print('Homogeneity :       {}'.format(metrics.homogeneity_score(output,model.labels_)))

"""Applying K means randomply on a certain cluster numbers and checking the accuracy"""

from sklearn import metrics
cluster_number = [15,20,35,64,170,256]
for i in cluster_number:
  total_clusters = len(np.unique(y_test))# Initialize the K-Means model
  kmeans = MiniBatchKMeans(n_clusters = i)# Fitting the model to training set
  kmeans.fit(X_train)# Calculating the metrics
  calculate_metrics(kmeans,y_train)# Calculating reference_labels
  reference_labels = retrieve_info(kmeans.labels_,y_train)# ‘number_labels’ is a list which denotes the number displayed in image
  number_labels = np.random.rand(len(kmeans.labels_))
  for i in range(len(kmeans.labels_)):
    number_labels[i] = reference_labels[kmeans.labels_[i]]
  print('Accuracy score : {}'.format(accuracy_score(number_labels,y_train)))
  print('\n')

"""Testing model on Testing set"""

# Initialize the K-Means model
kmeans = MiniBatchKMeans(n_clusters = 165)
# Fitting the model to  testing set
kmeans.fit(X_test)
# Calculating the metrics
calculate_metrics(kmeans,y_test)
# Calculating the reference_labels
reference_labels = retrieve_info(kmeans.labels_,y_test)
# ‘number_labels’ is a list which denotes the number displayed in image
number_labels = np.random.rand(len(kmeans.labels_))
for i in range(len(kmeans.labels_)):
  number_labels[i] = reference_labels[kmeans.labels_[i]] 
print('Accuracy score : {}'.format(accuracy_score(number_labels,y_test)))
print('\n')

# Cluster centroids is stored in ‘centroids’
centroids = kmeans.cluster_centers_

centroids.shape

centroids = centroids.reshape(165,28,28)

centroids = centroids * 255

plt.figure(figsize = (10,9))
bottom = 0.35
for i in range(16):
  plt.subplots_adjust(bottom)
  plt.subplot(4,4,i+1)
  plt.title('Number:{}'.format(reference_labels[i]),fontsize = 17)
  plt.imshow(centroids[i])

# Reading the image
image = plt.imread('testSample/testSample/img_39.jpg')
plt.imshow(image)

image = io.imread('testSample/testSample/img_39.jpg')

# Reshaping into a row vector
image = image.reshape(1,28*28)

image = image.astype(np.float32)

predicted_cluster = kmeans.predict(image)

number_labels[[predicted_cluster]]

